image_write('conf_ggplot.png','png')
#displaying the image
print(obama)
#Rendering JPG image into SVG
image_write(obama, path = 'obama.svg', format = 'svg')
#Applying Charcoal effect to Obama's image
#and compositing it with frink's image
#and finally annotating it with a text
image_charcoal(obama) %>%
image_composite(frink)  %>%
image_annotate("CONFIDENTIAL", size = 50, color = "red", boxcolor = "pink",
degrees = 30, location = "+100+100") %>%
image_rotate(30) %>%
image_write('obama_with_frink.png','png')
library(ggplot2)
img <- image_graph(600, 400, res = 96)
p <- ggplot(iris) + geom_point(aes(Sepal.Length,Petal.Length))
print(p)
dev.off()
img %>% image_annotate("CONFIDENTIAL", size = 50, color = "red", boxcolor = "pink",
degrees = 30, location = "+100+100")  %>%
image_write('conf_ggplot.png','png')
#Loading magick package
library(magick)
#reading a png image frink image
frink <- image_read("https://jeroen.github.io/images/frink.png")
#reading a jpg image ex-President Barack Obama from Wikipedia
obama <- image_read('https://cdn.pixabay.com/photo/2017/08/15/16/04/indian-flag-2644512_1280.jpg')
#image details
image_info(obama)
image_info(frink)
image_info(obama)
format width height colorspace filesize
1   JPEG   800    999       sRGB   151770
image_info(frink)
format width height colorspace filesize
1    PNG   220    445       sRGB    73494
#displaying the image
print(obama)
deployApp()
library(shinyapps)
library(shinyapps)
library(shinyapps)
install.packages("shiny")
getwd()
getwd("/Users/Rj13/Documents/shiny01/")
install.packages("shiny")
library(shiny)
runApp()
runApp()
runApp()
installed.packages
install.packages("BioCsoft")
shiny::runApp('C:/Users/Rj13/Desktop/ImageProcessing-master')
runApp('C:/Users/Rj13/Desktop/Handwritting2')
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
library(nnet)
modelName <- "neuralNetwork"
InputDataFileName="train.csv"
train <- read.csv(InputDataFileName)      # Read the datafile
setwd("C:/Users/Rj13/Desktop/DigitRecognition-master")
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
library(nnet)
modelName <- "neuralNetwork"
InputDataFileName="train.csv"
train <- read.csv(InputDataFileName)      # Read the datafile
train <- train[sample(nrow(train)),]  # Shuffle the data row wise
dt = sort(sample(nrow(train), nrow(train)*.7))
trainDataset<-train[dt,]
testDataSet<-train[-dt,]
head(trainDataset)   # Show Top 6 records
nrow(trainDataset)   # Show number of records
names(trainDataset)  # Show fields names or columns names
#--------------------------------------------------------------
# Step 5: Choose Target variable
#--------------------------------------------------------------
cat("\nStep 5: Choose Target Variable")
target  <- names(trainDataset)[1] #label name
target
#--------------------------------------------------------------
# Step 6: Choose inputs Variables
#--------------------------------------------------------------
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(trainDataset),target)
inputs
length(inputs)
#--------------------------------------------------------------
# Step 7: Select Training Data Set
#--------------------------------------------------------------
cat("\nStep 7: Select training dataset")
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
X=trainDataset[,-1] # contains all pixels value
Y=trainDataset[,1] # labels only
Xreduced <- X/255
Xcov <- cov(Xreduced)
pcaX <- prcomp(Xcov)
Xfinal <- as.matrix(Xreduced) %*% pcaX$rotation[,1:45]
Y <- class.ind(Y)
#--------------------------------------------------------------
# Step 8: Select Testing Data Set
#--------------------------------------------------------------
cat("\nStep 8: Select testing dataset")
testDataSet<-train[-dt,]
head(testDataSet)
nrow(testDataSet)
test=testDataSet[,-1]
testreduced <- test/255
testreduced <- as.matrix(testreduced) %*% pcaX$rotation[,1:45]
#write.csv(testDataset,file="testDataset.csv",row.names=FALSE);
#--------------------------------------------------------------
# Step 9: Model Building (Training)
#--------------------------------------------------------------
cat("\nStep 9: Model Building -> ", modelName)
#model   <- nnet(formula, trainDataset, size=10, linout=TRUE, skip=TRUE, MaxNWts=10000, trace=FALSE, maxit=100,softmax=TRUE)
model <- nnet(Xfinal,Y,size=150,softmax=TRUE,maxit=130,MaxNWts =80000)
model
#--------------------------------------------------------------
# Step 10: Prediction (Testing)
#--------------------------------------------------------------
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- predict(model, testreduced,type="class")
Predicted <- as.data.frame(Predicted);
head(Predicted)
#--------------------------------------------------------------
# Step 11: Extracting Actual
#--------------------------------------------------------------
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataSet[target]))
head(Actual)
#--------------------------------------------------------------
# Step 12: Model Evaluation
#--------------------------------------------------------------
cat("\nStep 12: Model Evaluation")
# Step 12.1: Accuracy
accuracy <- round(mean(Actual==Predicted) *100,2)
accuracy
# Step 12.2: Total Time
totalTime = proc.time()[3] - startTime
totalTime
# Step 12.3: Save evaluation resut
result <- data.frame(modelName,accuracy, totalTime)[1:1,]
result
#--------------------------------------------------------------
# Step 13: Writing to file
#--------------------------------------------------------------
cat("\nStep 13: Writing to file")
# Step 13.1: Writing to file (evaluation result)
write.csv(result, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=FALSE)
# Step 13.2: Writing to file (Actual and Predicted)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
#--------------------------------------------------------------
# Step 14: Saving the Model
#--------------------------------------------------------------
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
#--------------------------------------------------------------
#--------------------------------------------------------------
#                           END
modelFileName <- "neuralNetwork-Model.RData"
library(shiny)
library(nnet)
load(modelFileName)
ui <- fluidPage(
#input()
fileInput(inputId = "image","Choose a Image",multiple = FALSE,accept = c('image/png', 'image/jpeg')),
#output()
textOutput("digit"),
imageOutput("myImage")
)
modelFileName <- "neuralNetwork-Model.RData"
library(shiny)
library(nnet)
load(modelFileName)
server <- function(input, output) {
output$digit <- renderText({
inFile <- input$image
if (is.null(inFile))
return(NULL)
old = inFile$datapath
new = file.path(dirname(inFile$datapath),
inFile$name)
file.rename(from = old, to = new)
inFile$datapath <- new
Image <- readImage(inFile$datapath)
nof=numberOfFrames(Image, type = c('total', 'render'))
if(nof==1)
{
image=255*imageData(Image[1:28,1:28])
}else
if(nof==3)
{
r=255*imageData(Image[1:28,1:28,1])
g=255*imageData(Image[1:28,1:28,2])
b=255*imageData(Image[1:28,1:28,3])
#--------RGB TO GREYSCALE--------#
# uptil now
image=0.21*r+0.72*g+0.07*b
#image=(r+g+b)/3
#image=0.2989*r+0.5870*g+0.1140*b
#chk 0.2989, 0.5870, 0.1140. chk Red * 0.3 + Green * 0.59 + Blue * 0.11
image=round(image)
}
image=t(image)
#write.csv(image,'chkimg.csv',row.names = FALSE)
image=as.vector(t(image))
write.csv(t(as.matrix(image)),'threepx.csv',row.names = FALSE)
testFileName  <-'threepx.csv'
newTestDataset <- read.csv(testFileName)    # Read the datafile
testreduced <- newTestDataset/255
#Xcov <- cov(testreduced)
#pcaX <- prcomp(Xcov)
testreduced <- as.matrix(testreduced) %*% pcaX$rotation[,1:45]
NewPredicted <- predict(model,testreduced,type="class")
#NewPredicted <- as.data.frame(NewPredicted);
paste("Predicted Value is",NewPredicted)
})
output$myImage <- renderImage({
# A temp file to save the output.
# This file will be removed later by renderImage
inFile <- input$image
if (is.null(inFile))
return(NULL)
outfile <- tempfile(fileext='.jpg')
old = inFile$datapath
new = file.path(dirname(inFile$datapath),
inFile$name)
file.rename(from = old, to = new)
inFile$datapath <- new
# Return a list containing the filename
list(src = inFile$datapath,
contentType = 'image/jpeg',
width = 200,
height = 200,
alt = "Predicted image")
}, deleteFile = TRUE)
}
runApp()
cat("\nStep 2: Variable Declaration")
modelFileName <- "neuralNetwork-Model.RData"
#--------------------------------------------------------------
# Step 3: Model Loading
#--------------------------------------------------------------
cat("\nStep 3: Model Loading")
load(modelFileName)
#--------------------------------------------------------------
# Step 4: Data Loading
#--------------------------------------------------------------
#library(EBImage)
Image <- readImage('images1.jpg')
#--------------------------------------------------------------
# Step 4: Data Loading
#--------------------------------------------------------------
library(EBImage)
Image <- readImage('images1.jpg')
#-------------------------------------------------------------
cat("\nStep 4: Data Loading")
#image=readJPEG('4.jpg')
nof=numberOfFrames(Image, type = c('total', 'render'))
if(nof==1)
{
image=255*imageData(Image[1:28,1:28])
}else
if(nof==3)
{
r=255*imageData(Image[1:28,1:28,1])
g=255*imageData(Image[1:28,1:28,2])
b=255*imageData(Image[1:28,1:28,3])
#--------RGB TO GREYSCALE--------#
# uptil now
image=0.21*r+0.72*g+0.07*b
#image=(r+g+b)/3
#image=0.2989*r+0.5870*g+0.1140*b
#chk 0.2989, 0.5870, 0.1140. chk Red * 0.3 + Green * 0.59 + Blue * 0.11
image=round(image)
}
image=t(image)
#only to check pixel values of image
write.csv(image,'chkimg.csv',row.names = FALSE)
#------------upper line only----------------
image=as.vector(t(image))
write.csv(t(as.matrix(image)),'threepx.csv',row.names = FALSE)
testFileName  <-'threepx.csv'
newTestDataset <- read.csv(testFileName)    # Read the datafile
head(newTestDataset)
testreduced <- newTestDataset/255
#Xcov <- cov(testreduced)
#pcaX <- prcomp(Xcov)
testreduced <- as.matrix(testreduced) %*% pcaX$rotation[,1:45]
#--------------------------------------------------------------
# Step 5: Prediction (Testing)
#--------------------------------------------------------------
cat("\nStep 5: Prediction using -> ", modelName)
library(nnet)
NewPredicted <- predict(model,testreduced,type="class")
NewPredicted <- as.data.frame(NewPredicted);
head(NewPredicted)
#--------------------------------------------------------------
# Step 6: Saving Results
#--------------------------------------------------------------
cat("\nStep 6: Saving Results")
write.csv(data.frame(newTestDataset,NewPredicted), file=paste(modelName,"-Testing-Result.csv",sep=''), row.names=FALSE)
cat("\nDone")
#--------------------------------------------------------------
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
server <- function(input, output) {
output$digit <- renderText({
inFile <- input$image
if (is.null(inFile))
return(NULL)
old = inFile$datapath
new = file.path(dirname(inFile$datapath),
inFile$name)
file.rename(from = old, to = new)
inFile$datapath <- new
Image <- readImage(inFile$datapath)
nof=numberOfFrames(Image, type = c('total', 'render'))
if(nof==1)
{
image=255*imageData(Image[1:28,1:28])
}else
if(nof==3)
{
r=255*imageData(Image[1:28,1:28,1])
g=255*imageData(Image[1:28,1:28,2])
b=255*imageData(Image[1:28,1:28,3])
#--------RGB TO GREYSCALE--------#
# uptil now
image=0.21*r+0.72*g+0.07*b
#image=(r+g+b)/3
#image=0.2989*r+0.5870*g+0.1140*b
#chk 0.2989, 0.5870, 0.1140. chk Red * 0.3 + Green * 0.59 + Blue * 0.11
image=round(image)
}
image=t(image)
#write.csv(image,'chkimg.csv',row.names = FALSE)
image=as.vector(t(image))
write.csv(t(as.matrix(image)),'threepx.csv',row.names = FALSE)
testFileName  <-'threepx.csv'
newTestDataset <- read.csv(testFileName)    # Read the datafile
testreduced <- newTestDataset/255
#Xcov <- cov(testreduced)
#pcaX <- prcomp(Xcov)
testreduced <- as.matrix(testreduced) %*% pcaX$rotation[,1:45]
NewPredicted <- predict(model,testreduced,type="class")
#NewPredicted <- as.data.frame(NewPredicted);
paste("Predicted Value is",NewPredicted)
})
output$myImage <- renderImage({
# A temp file to save the output.
# This file will be removed later by renderImage
inFile <- input$image
if (is.null(inFile))
return(NULL)
outfile <- tempfile(fileext='.jpg')
old = inFile$datapath
new = file.path(dirname(inFile$datapath),
inFile$name)
file.rename(from = old, to = new)
inFile$datapath <- new
# Return a list containing the filename
list(src = inFile$datapath,
contentType = 'image/jpeg',
width = 200,
height = 200,
alt = "Predicted image")
}, deleteFile = TRUE)
}
runApp()
#--------------------------------------------------------------
# Step 4: Data Loading
#--------------------------------------------------------------
library(EBImage)
Image <- readImage('images5.jpeg')
#--------------------------------------------------------------
# Step 4: Data Loading
#--------------------------------------------------------------
library(EBImage)
Image <- readImage('unnamed.jpeg')
#-------------------------------------------------------------
cat("\nStep 4: Data Loading")
#image=readJPEG('4.jpg')
nof=numberOfFrames(Image, type = c('total', 'render'))
if(nof==1)
{
image=255*imageData(Image[1:28,1:28])
}else
if(nof==3)
{
r=255*imageData(Image[1:28,1:28,1])
g=255*imageData(Image[1:28,1:28,2])
b=255*imageData(Image[1:28,1:28,3])
#--------RGB TO GREYSCALE--------#
# uptil now
image=0.21*r+0.72*g+0.07*b
#image=(r+g+b)/3
#image=0.2989*r+0.5870*g+0.1140*b
#chk 0.2989, 0.5870, 0.1140. chk Red * 0.3 + Green * 0.59 + Blue * 0.11
image=round(image)
}
image=t(image)
#only to check pixel values of image
write.csv(image,'chkimg.csv',row.names = FALSE)
#------------upper line only----------------
image=as.vector(t(image))
write.csv(t(as.matrix(image)),'threepx.csv',row.names = FALSE)
testFileName  <-'threepx.csv'
newTestDataset <- read.csv(testFileName)    # Read the datafile
head(newTestDataset)
testreduced <- newTestDataset/255
#Xcov <- cov(testreduced)
#pcaX <- prcomp(Xcov)
testreduced <- as.matrix(testreduced) %*% pcaX$rotation[,1:45]
#--------------------------------------------------------------
# Step 5: Prediction (Testing)
#--------------------------------------------------------------
cat("\nStep 5: Prediction using -> ", modelName)
library(nnet)
NewPredicted <- predict(model,testreduced,type="class")
NewPredicted <- as.data.frame(NewPredicted);
head(NewPredicted)
#--------------------------------------------------------------
# Step 6: Saving Results
#--------------------------------------------------------------
cat("\nStep 6: Saving Results")
write.csv(data.frame(newTestDataset,NewPredicted), file=paste(modelName,"-Testing-Result.csv",sep=''), row.names=FALSE)
cat("\nDone")
#--------------------------------------------------------------
#--------------------------------------------------------------
#                           END
runApp()
ui <- fluidPage(
#input()
fileInput(inputId = "image","Choose a Image",multiple = FALSE,accept = c('image/png', 'image/jpeg')),
#output()
textOutput("text"),
imageOutput("myImage")
)
server <- function(input, output) {
output$text <- renderText({
inFile <- input$image
if (is.null(inFile))
return(NULL)
old = inFile$datapath
new = file.path(dirname(inFile$datapath),
inFile$name)
file.rename(from = old, to = new)
inFile$datapath <- new
Image <- readImage(inFile$datapath)
nof=numberOfFrames(Image, type = c('total', 'render'))
if(nof==1)
{
image=255*imageData(Image[1:28,1:28])
}else
if(nof==3)
{
r=255*imageData(Image[1:28,1:28,1])
g=255*imageData(Image[1:28,1:28,2])
b=255*imageData(Image[1:28,1:28,3])
#--------RGB TO GREYSCALE--------#
# uptil now
image=0.21*r+0.72*g+0.07*b
#image=(r+g+b)/3
#image=0.2989*r+0.5870*g+0.1140*b
#chk 0.2989, 0.5870, 0.1140. chk Red * 0.3 + Green * 0.59 + Blue * 0.11
image=round(image)
}
image=t(image)
#write.csv(image,'chkimg.csv',row.names = FALSE)
image=as.vector(t(image))
write.csv(t(as.matrix(image)),'threepx.csv',row.names = FALSE)
testFileName  <-'threepx.csv'
newTestDataset <- read.csv(testFileName)    # Read the datafile
testreduced <- newTestDataset/255
#Xcov <- cov(testreduced)
#pcaX <- prcomp(Xcov)
testreduced <- as.matrix(testreduced) %*% pcaX$rotation[,1:45]
NewPredicted <- predict(model,testreduced,type="class")
#NewPredicted <- as.data.frame(NewPredicted);
paste("Predicted Value is",NewPredicted)
})
output$myImage <- renderImage({
# A temp file to save the output.
# This file will be removed later by renderImage
inFile <- input$image
if (is.null(inFile))
return(NULL)
outfile <- tempfile(fileext='.jpg')
old = inFile$datapath
new = file.path(dirname(inFile$datapath),
inFile$name)
file.rename(from = old, to = new)
inFile$datapath <- new
# Return a list containing the filename
list(src = inFile$datapath,
contentType = 'image/jpeg',
width = 200,
height = 200,
alt = "Predicted image")
}, deleteFile = TRUE)
}
runApp()
